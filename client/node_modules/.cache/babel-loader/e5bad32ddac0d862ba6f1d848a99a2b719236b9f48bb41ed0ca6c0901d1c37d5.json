{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YaaSa\\\\OneDrive - Institut Teccart\\\\Documents\\\\s6_projects\\\\SchoolBag\\\\client\\\\src\\\\context\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const {\n    isAuthenticated,\n    token\n  } = useAuth();\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n  // Axios config with auth header\n  const getAxiosConfig = () => ({\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  // Fetch notifications\n  const fetchNotifications = async (unreadOnly = false) => {\n    if (!isAuthenticated || !token) return;\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE_URL}/notifications?unreadOnly=${unreadOnly}&limit=20`, getAxiosConfig());\n      if (response.data.success) {\n        setNotifications(response.data.data);\n        setUnreadCount(response.data.unreadCount);\n      }\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch unread count only\n  const fetchUnreadCount = async () => {\n    if (!isAuthenticated || !token) return;\n    try {\n      const response = await axios.get(`${API_BASE_URL}/notifications/count`, getAxiosConfig());\n      if (response.data.success) {\n        setUnreadCount(response.data.count);\n      }\n    } catch (error) {\n      console.error('Error fetching unread count:', error);\n    }\n  };\n\n  // Mark notification as read\n  const markAsRead = async notificationId => {\n    if (!isAuthenticated || !token) return;\n    try {\n      const response = await axios.put(`${API_BASE_URL}/notifications/${notificationId}/read`, {}, getAxiosConfig());\n      if (response.data.success) {\n        // Update local state\n        setNotifications(prev => prev.map(notif => notif._id === notificationId ? {\n          ...notif,\n          isRead: true,\n          readAt: new Date()\n        } : notif));\n        setUnreadCount(prev => Math.max(0, prev - 1));\n      }\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n\n  // Mark all notifications as read\n  const markAllAsRead = async () => {\n    if (!isAuthenticated || !token) return;\n    try {\n      const response = await axios.put(`${API_BASE_URL}/notifications/read-all`, {}, getAxiosConfig());\n      if (response.data.success) {\n        // Update local state\n        setNotifications(prev => prev.map(notif => ({\n          ...notif,\n          isRead: true,\n          readAt: new Date()\n        })));\n        setUnreadCount(0);\n      }\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n    }\n  };\n\n  // Delete notification\n  const deleteNotification = async notificationId => {\n    if (!isAuthenticated || !token) return;\n    try {\n      const response = await axios.delete(`${API_BASE_URL}/notifications/${notificationId}`, getAxiosConfig());\n      if (response.data.success) {\n        // Update local state\n        const deletedNotification = notifications.find(n => n._id === notificationId);\n        setNotifications(prev => prev.filter(notif => notif._id !== notificationId));\n        if (deletedNotification && !deletedNotification.isRead) {\n          setUnreadCount(prev => Math.max(0, prev - 1));\n        }\n      }\n    } catch (error) {\n      console.error('Error deleting notification:', error);\n    }\n  };\n\n  // Create notification (for testing purposes)\n  const createNotification = async notificationData => {\n    if (!isAuthenticated || !token) return;\n    try {\n      const response = await axios.post(`${API_BASE_URL}/notifications`, notificationData, getAxiosConfig());\n      if (response.data.success) {\n        setNotifications(prev => [response.data.data, ...prev]);\n        setUnreadCount(prev => prev + 1);\n        return response.data.data;\n      }\n    } catch (error) {\n      console.error('Error creating notification:', error);\n    }\n  };\n\n  // Auto-refresh notifications periodically\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchUnreadCount();\n\n      // Refresh count every 30 seconds\n      const interval = setInterval(fetchUnreadCount, 30000);\n      return () => clearInterval(interval);\n    }\n  }, [isAuthenticated, token]);\n\n  // Reset state when user logs out\n  useEffect(() => {\n    if (!isAuthenticated) {\n      setNotifications([]);\n      setUnreadCount(0);\n    }\n  }, [isAuthenticated]);\n  const value = {\n    notifications,\n    unreadCount,\n    loading,\n    fetchNotifications,\n    fetchUnreadCount,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    createNotification\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"wVvtqAIMB/EN7skI5VzA4wrBMx8=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","useAuth","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","unreadCount","setUnreadCount","loading","setLoading","isAuthenticated","token","API_BASE_URL","process","env","REACT_APP_API_URL","getAxiosConfig","headers","Authorization","fetchNotifications","unreadOnly","response","get","data","success","error","console","fetchUnreadCount","count","markAsRead","notificationId","put","prev","map","notif","_id","isRead","readAt","Date","Math","max","markAllAsRead","deleteNotification","delete","deletedNotification","find","n","filter","createNotification","notificationData","post","interval","setInterval","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/YaaSa/OneDrive - Institut Teccart/Documents/s6_projects/SchoolBag/client/src/context/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport const useNotifications = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const { isAuthenticated, token } = useAuth();\r\n\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n  // Axios config with auth header\r\n  const getAxiosConfig = () => ({\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n\r\n  // Fetch notifications\r\n  const fetchNotifications = async (unreadOnly = false) => {\r\n    if (!isAuthenticated || !token) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.get(\r\n        `${API_BASE_URL}/notifications?unreadOnly=${unreadOnly}&limit=20`,\r\n        getAxiosConfig()\r\n      );\r\n      \r\n      if (response.data.success) {\r\n        setNotifications(response.data.data);\r\n        setUnreadCount(response.data.unreadCount);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching notifications:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch unread count only\r\n  const fetchUnreadCount = async () => {\r\n    if (!isAuthenticated || !token) return;\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `${API_BASE_URL}/notifications/count`,\r\n        getAxiosConfig()\r\n      );\r\n      \r\n      if (response.data.success) {\r\n        setUnreadCount(response.data.count);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching unread count:', error);\r\n    }\r\n  };\r\n\r\n  // Mark notification as read\r\n  const markAsRead = async (notificationId) => {\r\n    if (!isAuthenticated || !token) return;\r\n\r\n    try {\r\n      const response = await axios.put(\r\n        `${API_BASE_URL}/notifications/${notificationId}/read`,\r\n        {},\r\n        getAxiosConfig()\r\n      );\r\n      \r\n      if (response.data.success) {\r\n        // Update local state\r\n        setNotifications(prev => \r\n          prev.map(notif => \r\n            notif._id === notificationId \r\n              ? { ...notif, isRead: true, readAt: new Date() }\r\n              : notif\r\n          )\r\n        );\r\n        setUnreadCount(prev => Math.max(0, prev - 1));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n    }\r\n  };\r\n\r\n  // Mark all notifications as read\r\n  const markAllAsRead = async () => {\r\n    if (!isAuthenticated || !token) return;\r\n\r\n    try {\r\n      const response = await axios.put(\r\n        `${API_BASE_URL}/notifications/read-all`,\r\n        {},\r\n        getAxiosConfig()\r\n      );\r\n      \r\n      if (response.data.success) {\r\n        // Update local state\r\n        setNotifications(prev => \r\n          prev.map(notif => ({ \r\n            ...notif, \r\n            isRead: true, \r\n            readAt: new Date() \r\n          }))\r\n        );\r\n        setUnreadCount(0);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error marking all notifications as read:', error);\r\n    }\r\n  };\r\n\r\n  // Delete notification\r\n  const deleteNotification = async (notificationId) => {\r\n    if (!isAuthenticated || !token) return;\r\n\r\n    try {\r\n      const response = await axios.delete(\r\n        `${API_BASE_URL}/notifications/${notificationId}`,\r\n        getAxiosConfig()\r\n      );\r\n      \r\n      if (response.data.success) {\r\n        // Update local state\r\n        const deletedNotification = notifications.find(n => n._id === notificationId);\r\n        setNotifications(prev => prev.filter(notif => notif._id !== notificationId));\r\n        \r\n        if (deletedNotification && !deletedNotification.isRead) {\r\n          setUnreadCount(prev => Math.max(0, prev - 1));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting notification:', error);\r\n    }\r\n  };\r\n\r\n  // Create notification (for testing purposes)\r\n  const createNotification = async (notificationData) => {\r\n    if (!isAuthenticated || !token) return;\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        `${API_BASE_URL}/notifications`,\r\n        notificationData,\r\n        getAxiosConfig()\r\n      );\r\n      \r\n      if (response.data.success) {\r\n        setNotifications(prev => [response.data.data, ...prev]);\r\n        setUnreadCount(prev => prev + 1);\r\n        return response.data.data;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating notification:', error);\r\n    }\r\n  };\r\n\r\n  // Auto-refresh notifications periodically\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      fetchUnreadCount();\r\n      \r\n      // Refresh count every 30 seconds\r\n      const interval = setInterval(fetchUnreadCount, 30000);\r\n      \r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isAuthenticated, token]);\r\n\r\n  // Reset state when user logs out\r\n  useEffect(() => {\r\n    if (!isAuthenticated) {\r\n      setNotifications([]);\r\n      setUnreadCount(0);\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  const value = {\r\n    notifications,\r\n    unreadCount,\r\n    loading,\r\n    fetchNotifications,\r\n    fetchUnreadCount,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    deleteNotification,\r\n    createNotification\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,mBAAmB,gBAAGR,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMS,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAMC,OAAO,GAAGV,UAAU,CAACO,mBAAmB,CAAC;EAC/C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6DAA6D,CAAC;EAChF;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,gBAAgB;AAQ7B,OAAO,MAAMI,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACpD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM;IAAEoB,eAAe;IAAEC;EAAM,CAAC,GAAGlB,OAAO,CAAC,CAAC;EAE5C,MAAMmB,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;EAEjF;EACA,MAAMC,cAAc,GAAGA,CAAA,MAAO;IAC5BC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUP,KAAK;IAChC;EACF,CAAC,CAAC;;EAEF;EACA,MAAMQ,kBAAkB,GAAG,MAAAA,CAAOC,UAAU,GAAG,KAAK,KAAK;IACvD,IAAI,CAACV,eAAe,IAAI,CAACC,KAAK,EAAE;IAEhC,IAAI;MACFF,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMY,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,GAAG,CAC9B,GAAGV,YAAY,6BAA6BQ,UAAU,WAAW,EACjEJ,cAAc,CAAC,CACjB,CAAC;MAED,IAAIK,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzBnB,gBAAgB,CAACgB,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC;QACpChB,cAAc,CAACc,QAAQ,CAACE,IAAI,CAACjB,WAAW,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMkB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAACjB,eAAe,IAAI,CAACC,KAAK,EAAE;IAEhC,IAAI;MACF,MAAMU,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,GAAG,CAC9B,GAAGV,YAAY,sBAAsB,EACrCI,cAAc,CAAC,CACjB,CAAC;MAED,IAAIK,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzBjB,cAAc,CAACc,QAAQ,CAACE,IAAI,CAACK,KAAK,CAAC;MACrC;IACF,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;;EAED;EACA,MAAMI,UAAU,GAAG,MAAOC,cAAc,IAAK;IAC3C,IAAI,CAACpB,eAAe,IAAI,CAACC,KAAK,EAAE;IAEhC,IAAI;MACF,MAAMU,QAAQ,GAAG,MAAM7B,KAAK,CAACuC,GAAG,CAC9B,GAAGnB,YAAY,kBAAkBkB,cAAc,OAAO,EACtD,CAAC,CAAC,EACFd,cAAc,CAAC,CACjB,CAAC;MAED,IAAIK,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzB;QACAnB,gBAAgB,CAAC2B,IAAI,IACnBA,IAAI,CAACC,GAAG,CAACC,KAAK,IACZA,KAAK,CAACC,GAAG,KAAKL,cAAc,GACxB;UAAE,GAAGI,KAAK;UAAEE,MAAM,EAAE,IAAI;UAAEC,MAAM,EAAE,IAAIC,IAAI,CAAC;QAAE,CAAC,GAC9CJ,KACN,CACF,CAAC;QACD3B,cAAc,CAACyB,IAAI,IAAIO,IAAI,CAACC,GAAG,CAAC,CAAC,EAAER,IAAI,GAAG,CAAC,CAAC,CAAC;MAC/C;IACF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D;EACF,CAAC;;EAED;EACA,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAAC/B,eAAe,IAAI,CAACC,KAAK,EAAE;IAEhC,IAAI;MACF,MAAMU,QAAQ,GAAG,MAAM7B,KAAK,CAACuC,GAAG,CAC9B,GAAGnB,YAAY,yBAAyB,EACxC,CAAC,CAAC,EACFI,cAAc,CAAC,CACjB,CAAC;MAED,IAAIK,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzB;QACAnB,gBAAgB,CAAC2B,IAAI,IACnBA,IAAI,CAACC,GAAG,CAACC,KAAK,KAAK;UACjB,GAAGA,KAAK;UACRE,MAAM,EAAE,IAAI;UACZC,MAAM,EAAE,IAAIC,IAAI,CAAC;QACnB,CAAC,CAAC,CACJ,CAAC;QACD/B,cAAc,CAAC,CAAC,CAAC;MACnB;IACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAClE;EACF,CAAC;;EAED;EACA,MAAMiB,kBAAkB,GAAG,MAAOZ,cAAc,IAAK;IACnD,IAAI,CAACpB,eAAe,IAAI,CAACC,KAAK,EAAE;IAEhC,IAAI;MACF,MAAMU,QAAQ,GAAG,MAAM7B,KAAK,CAACmD,MAAM,CACjC,GAAG/B,YAAY,kBAAkBkB,cAAc,EAAE,EACjDd,cAAc,CAAC,CACjB,CAAC;MAED,IAAIK,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzB;QACA,MAAMoB,mBAAmB,GAAGxC,aAAa,CAACyC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACX,GAAG,KAAKL,cAAc,CAAC;QAC7EzB,gBAAgB,CAAC2B,IAAI,IAAIA,IAAI,CAACe,MAAM,CAACb,KAAK,IAAIA,KAAK,CAACC,GAAG,KAAKL,cAAc,CAAC,CAAC;QAE5E,IAAIc,mBAAmB,IAAI,CAACA,mBAAmB,CAACR,MAAM,EAAE;UACtD7B,cAAc,CAACyB,IAAI,IAAIO,IAAI,CAACC,GAAG,CAAC,CAAC,EAAER,IAAI,GAAG,CAAC,CAAC,CAAC;QAC/C;MACF;IACF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;;EAED;EACA,MAAMuB,kBAAkB,GAAG,MAAOC,gBAAgB,IAAK;IACrD,IAAI,CAACvC,eAAe,IAAI,CAACC,KAAK,EAAE;IAEhC,IAAI;MACF,MAAMU,QAAQ,GAAG,MAAM7B,KAAK,CAAC0D,IAAI,CAC/B,GAAGtC,YAAY,gBAAgB,EAC/BqC,gBAAgB,EAChBjC,cAAc,CAAC,CACjB,CAAC;MAED,IAAIK,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzBnB,gBAAgB,CAAC2B,IAAI,IAAI,CAACX,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE,GAAGS,IAAI,CAAC,CAAC;QACvDzB,cAAc,CAACyB,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;QAChC,OAAOX,QAAQ,CAACE,IAAI,CAACA,IAAI;MAC3B;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;;EAED;EACAlC,SAAS,CAAC,MAAM;IACd,IAAImB,eAAe,EAAE;MACnBiB,gBAAgB,CAAC,CAAC;;MAElB;MACA,MAAMwB,QAAQ,GAAGC,WAAW,CAACzB,gBAAgB,EAAE,KAAK,CAAC;MAErD,OAAO,MAAM0B,aAAa,CAACF,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,CAACzC,eAAe,EAAEC,KAAK,CAAC,CAAC;;EAE5B;EACApB,SAAS,CAAC,MAAM;IACd,IAAI,CAACmB,eAAe,EAAE;MACpBL,gBAAgB,CAAC,EAAE,CAAC;MACpBE,cAAc,CAAC,CAAC,CAAC;IACnB;EACF,CAAC,EAAE,CAACG,eAAe,CAAC,CAAC;EAErB,MAAM4C,KAAK,GAAG;IACZlD,aAAa;IACbE,WAAW;IACXE,OAAO;IACPW,kBAAkB;IAClBQ,gBAAgB;IAChBE,UAAU;IACVY,aAAa;IACbC,kBAAkB;IAClBM;EACF,CAAC;EAED,oBACErD,OAAA,CAACC,mBAAmB,CAAC2D,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApD,QAAA,EACxCA;EAAQ;IAAAsD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;AAACxD,GAAA,CA/LWF,oBAAoB;EAAA,QAIIR,OAAO;AAAA;AAAAmE,EAAA,GAJ/B3D,oBAAoB;AAAA,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}